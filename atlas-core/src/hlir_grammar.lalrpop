use crate::hlir::*;
use crate::hlir::lexer::Token as Token;
use ordered_float::{NotNan,OrderedFloat};


grammar<'src>;

extern {
    enum Token<'src> {
        "true" => Token::True,
        "false" => Token::False,
        "integer" => Token::Integer(<u64>),
        "string" => Token::String(<&'src str>),
        "float" => Token::Float(<NotNan<f64>>),

        "->" => Token::Arrow,
        "*" => Token::Star,
        ":" => Token::Colon,
        "_" => Token::Hole,
        "(" => Token::LParen,
        ")" => Token::RParen,
        "lam" => Token::Lam,
        "," => Token::Comma,
        "." => Token::Dot,
        "and" => Token::And,
        "in" => Token::In,
        "=" => Token::Equals,
        "$" => Token::Dollar,
        "#" => Token::Pound,
        "identifier" => Token::Identifier(<&'src str>),
    }
}

Constant : Constant = {
    "integer" => Constant::Integer(<> as i64),
    "float" => Constant::Float(OrderedFloat::from(<>.into_inner())),
    "string" => Constant::String(String::from(<>)),
    "true" => Constant::Bool(true),
    "false" => Constant::Bool(false),
    "(" ")" => Constant::Unit
}

TypeAtom : VarType = {
    "identifier" => VarType::Id(Symbol::from(<>)),
    "_" => VarType::Hole,
    "*" => VarType::Kind,
    "(" <t:Type> ")" => t
}
AppType : VarType = {
    TypeAtom => <>,
    <l:AppType> <r:TypeAtom> => VarType::App(Box::new(l), Box::new(r)),
}
Type : VarType = {
    AppType => <>,
    <l:AppType> "->" <r:Type> => 
        VarType::App(
            Box::new(VarType::App(Box::new(VarType::Arrow), Box::new(l))),
            Box::new(r)
        )
}

Atom : Expr = {
    Constant => Expr::Const(<>),
    "identifier" => Expr::Id(Symbol::from(<>)),
    // Type Atoms
    "_" => Expr::VarType(VarType::Hole),
    "*" => Expr::VarType(VarType::Kind),
    "(" <Expr> ")" => <>,
    "$" <exp: Atom> => {
        Expr::Call(Box::new(exp))
    },
    "#" <exp: Atom> => {
        Expr::Callable(Box::new(exp))
    }
}

Var : Var = {
    <ident:"identifier"> => {
        Var(Symbol::from(ident), VarType::Hole)
    },
    <ident:"identifier"> ":" <t:Type> => {
        Var(Symbol::from(ident), t)
    },
}

Bind : (Var, Expr) = {
    <var:Var> "=" <expr:Expr> => {
        (var, expr)
    }
}

AppExpr : Expr = {
    Atom => <>,
    <l:AppExpr> <r:Atom> => Expr::App(Box::new(l), Box::new(r)),
}

pub Expr : Expr = {
    AppExpr => <>,
    <l:AppExpr> "->" <r:Expr> => Expr::App(
        Box::new(Expr::App(Box::new(Expr::VarType(VarType::Arrow)), Box::new(l))), Box::new(r)
    ),
    <bind:Bind> "in" <body:Expr> => {
        let (ident, expr) = bind;
        Expr::Let(Bind::NonRec(ident, Box::new(expr)), Box::new(body))
    },
    <mut binds:(<Bind> "and")+> <last_bind:Bind> "in" <body:Expr> => {
        binds.push(last_bind);
        Expr::Let(Bind::Rec(binds), Box::new(body))
    },
    "lam" <mut vars: (<Var> ",")* > <last_var: Var?> "." <body:Expr> => {
        if let Some(last_var) = last_var {
            vars.push(last_var);
        }
        Expr::Lam(vars, Box::new(body))
    },
}