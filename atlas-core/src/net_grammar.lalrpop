use crate::vm::ast::*;
use ordered_float::{NotNan,OrderedFloat};
use std::collections::BTreeMap;

grammar<'src>;

extern {
    enum Token<'src> {
        "identifier" => Token::Identifier(<&'src str>),
        "reference" => Token::Reference(<&'src str>),
        "operator" => Token::Operator(<&'src str>),
        "type" => Token::Type(<(&'src str,Option<&'src str>)>),

        "," => Token::Comma,
        "*" => Token::Star,
        "=" => Token::Equals,
        "~" => Token::Tilde,
        "&" => Token::Ampersand,
        "(" => Token::LParen,
        ")" => Token::RParen,
        "{" => Token::LBrace,
        "}" => Token::RBrace,
        "[" => Token::LBracket,
        "]" => Token::RBracket,
        "<" => Token::LAngle,
        ">" => Token::RAngle,

        "true" => Token::True,
        "false" => Token::False,
        "integer" => Token::Integer(<u64>),
        "string" => Token::String(<&'src str>),
        "float" => Token::Float(<NotNan<f64>>),
    }
}

Constant : Constant = {
    "integer" => Constant::Integer(<> as i64),
    "float" => Constant::Float(OrderedFloat::from(<>.into_inner())),
    "string" => Constant::String(String::from(<>)),
    "true" => Constant::Bool(true),
    "false" => Constant::Bool(false),
    "(" ")" => Constant::Unit
}

Tree : Tree = {
    Constant => Tree::Constant(<>),
    "identifier" => Tree::Var(String::from(<>)),
    "reference" => Tree::Ref(String::from(<>)),

    // All the different operator variants
    <o:"operator"> => Tree::Operator(String::from(o), Vec::new(), Vec::new()),
    <op:"operator"> "<" <mut params: (<Constant> ",")*> <last_param: Constant> ">" => {
        params.push(last_param);
        Tree::Operator(String::from(op), params, Vec::new())
    },
    <op:"operator"> "[" <mut args: (<Tree> ",")*> <last_arg: Tree> "]" => {
        args.push(last_arg);
        Tree::Operator(String::from(op), Vec::new(), args)
    },
    <op:"operator"> "<" <mut params: (<Constant> ",")*> <last_param: Constant> ">" "[" <mut args: (<Tree> ",")*> <last_arg: Tree> ","? "]" => {
        params.push(last_param);
        args.push(last_arg);
        Tree::Operator(String::from(op), params, args)
    },

    <ty:"type"?> "(" <mut args: ("," <Tree> ",")*> <last: Tree> ","? ")" => {
        args.push(last);
        let ty = ty.map(|ty| { Type(String::from(ty.0), ty.1.map(String::from))});
        Tree::Con(ty, args)
    },
    <ty:"type"?> "(" "," ")" => {
        let ty = ty.map(|ty| { Type(String::from(ty.0), ty.1.map(String::from))});
        Tree::Con(ty, Vec::new())
    },
    "{" <dups:Tree*> "}" => Tree::Dup(dups),
    "*" => Tree::Erase,
}

pub Redex : Redex = {
    <lhs: Tree> "~" <rhs:Tree> => Redex { lhs, rhs }
}

pub Net : Net = {
    <root: Tree> <redexs:("&" <Redex>)*>  =>  Net { root, redexs }
}

Def : (String, Net) = {
    <label:"reference"> "=" <net:Net> => (String::from(label), net)
}

pub Book : Book = {
    <defs:Def*> => {
        let mut map = BTreeMap::new();
        for (n, d) in defs {
            if map.contains_key(&n) {
                panic!("Unable")
            }
            map.insert(n, d);
        }
        Book { defs: map }
    }
}
